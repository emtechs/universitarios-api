// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  LEADER
  COMMON
}

enum Status {
  CONFIRMED
  REFUSED
  ANALYZING
  PENDING
  BLOCKED
  RECEIVED
}

enum Category {
  FT
  MAT
  DOC
  END
}

enum Shift {
  MORNING
  AFTERNOON
  NIGHT
  FULL
}

model User {
  id              String         @id @default(uuid())
  name            String         @db.VarChar(254)
  email           String?        @db.VarChar(254)
  login           String         @unique @db.VarChar(128)
  password        String         @db.VarChar(128)
  cpf             String         @unique @db.VarChar(14)
  rg              String?        @db.VarChar(128)
  role            Role           @default(COMMON)
  is_super        Boolean        @default(false)
  is_active       Boolean        @default(true)
  is_first_access Boolean        @default(true)
  created_at      DateTime       @default(now())
  profile         Image?
  token           Token?
  documents       DocumentUser[]
  periods         Record[]       @relation("PeriodUser")
  analysis        Record[]       @relation("AnalystUser")
  actions         Action[]

  @@map("users")
}

model School {
  id         String   @id @default(uuid())
  name       String   @unique @db.VarChar(254)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  place      Place?
  students   Record[]

  @@map("schools")
}

model Place {
  id        String       @id @default(uuid())
  name      String?      @unique @db.VarChar(254)
  school    School?      @relation(fields: [school_id], references: [id], onDelete: Cascade)
  school_id String?      @unique
  routes    PlaceRoute[]

  @@map("places")
}

model Bus {
  id         String       @id @default(uuid())
  name       String       @unique @db.VarChar(254)
  capacity   Int          @db.Integer
  is_active  Boolean      @default(true)
  created_at DateTime     @default(now())
  lines      LineRecord[]

  @@map("buses")
}

model Record {
  key        String       @unique @default(uuid())
  status     Status       @default(PENDING)
  course     String?      @db.VarChar(200)
  semester   Int?         @db.Integer
  total      Int?         @db.Integer
  shift      Shift?
  created_at DateTime     @default(now())
  document   Document?
  user       User         @relation("PeriodUser", fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  period     Period       @relation(fields: [period_id], references: [id], onDelete: Cascade)
  period_id  String
  school     School?      @relation(fields: [school_id], references: [id], onDelete: Cascade)
  school_id  String?
  analyst    User?        @relation("AnalystUser", fields: [analyst_id], references: [id], onDelete: Cascade)
  analyst_id String?
  actions    Action[]
  lines      LineRecord[]

  @@id([user_id, period_id])
  @@map("records")
}

model Document {
  id        String         @id @default(uuid())
  category  Category
  status    Status         @default(PENDING)
  is_back   Boolean        @default(false)
  image     Image?
  record    Record?        @relation(fields: [record_id], references: [key], onDelete: Cascade)
  record_id String?        @unique
  actions   Action[]
  users     DocumentUser[]

  @@map("documents")
}

model Action {
  id            String    @id @default(uuid())
  description   String    @db.VarChar(200)
  justification String?   @db.VarChar(200)
  created_at    DateTime  @default(now())
  record        Record?   @relation(fields: [record_id], references: [key], onDelete: Cascade)
  record_id     String?
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String
  document      Document? @relation(fields: [document_id], references: [id], onDelete: Cascade)
  document_id   String?

  @@map("actions")
}

model DocumentUser {
  key         String   @unique @default(uuid())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  document    Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  document_id String

  @@id([user_id, document_id])
  @@map("document_user")
}

model Route {
  id         String       @id @default(uuid())
  name       String       @unique @db.VarChar(254)
  is_active  Boolean      @default(true)
  created_at DateTime     @default(now())
  lines      Line[]
  places     PlaceRoute[]

  @@map("routes")
}

model PlaceRoute {
  key      String @unique @default(uuid())
  place    Place  @relation(fields: [place_id], references: [id], onDelete: Cascade)
  place_id String
  route    Route  @relation(fields: [route_id], references: [id], onDelete: Cascade)
  route_id String

  @@id([place_id, route_id])
  @@map("place_route")
}

model Line {
  id        String       @id @default(uuid())
  shift     Shift
  is_back   Boolean      @default(false)
  route     Route        @relation(fields: [route_id], references: [id], onDelete: Cascade)
  route_id  String
  period    Period       @relation(fields: [period_id], references: [id], onDelete: Cascade)
  period_id String
  week      Week         @relation(fields: [week_id], references: [id], onDelete: Cascade)
  week_id   String
  students  LineRecord[]

  @@map("lines")
}

model LineRecord {
  key       String  @unique @default(uuid())
  line      Line    @relation(fields: [line_id], references: [id], onDelete: Cascade)
  line_id   String
  record    Record  @relation(fields: [record_id], references: [key], onDelete: Cascade)
  record_id String
  bus       Bus?    @relation(fields: [bus_id], references: [id], onDelete: Cascade)
  bus_id    String?

  @@id([line_id, record_id])
  @@map("line_record")
}

model Year {
  id      String   @id @default(uuid())
  year    String   @unique @db.VarChar(10)
  periods Period[]

  @@map("years")
}

model Week {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(30)
  week  Int    @unique @db.Integer
  lines Line[]

  @@map("weeks")
}

model Period {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(50)
  date_initial DateTime @db.Date
  date_final   DateTime @db.Date
  year         Year     @relation(fields: [year_id], references: [id], onDelete: Cascade)
  year_id      String
  records      Record[]
  lines        Line[]

  @@map("periods")
}

model Image {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(200)
  size        Int       @db.Integer()
  url         String    @db.VarChar(200)
  key         String    @unique @db.VarChar(200)
  created_at  DateTime  @default(now())
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String?   @unique
  document    Document? @relation(fields: [document_id], references: [id], onDelete: Cascade)
  document_id String?   @unique

  @@map("images")
}

model Token {
  id         String   @id @default(uuid())
  token      String   @db.VarChar(200)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String   @unique
  created_at DateTime @default(now())

  @@map("token")
}
