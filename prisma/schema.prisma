// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  LEADER
  COMMON
}

enum Status {
  CONFIRMED
  REFUSED
  ANALYZING
  PENDING
  BLOCKED
  RECEIVED
}

enum Category {
  FT
  MAT
}

enum Shift {
  MORNING
  AFTERNOON
  NIGHT
  FULL
}

model User {
  id              String         @id @default(uuid())
  name            String         @db.VarChar(254)
  email           String?        @db.VarChar(254)
  login           String         @unique @db.VarChar(128)
  password        String         @db.VarChar(128)
  cpf             String         @unique @db.VarChar(14)
  role            Role           @default(COMMON)
  is_active       Boolean        @default(true)
  is_first_access Boolean        @default(true)
  created_at      DateTime       @default(now())
  token           Token?
  documents       DocumentUser[]
  periods         Record[]
  requests        Request[]
  analysis        Document[]

  @@map("users")
}

model School {
  id         String   @id @default(uuid())
  name       String   @unique @db.VarChar(254)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  students   Record[]

  @@map("schools")
}

model Record {
  key       String    @unique @default(uuid())
  status    Status    @default(PENDING)
  course    String?   @db.VarChar(200)
  semester  Int?      @db.Integer
  shift     Shift?
  document  Document?
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  period    Period    @relation(fields: [period_id], references: [id], onDelete: Cascade)
  period_id String
  school    School?   @relation(fields: [school_id], references: [id], onDelete: Cascade)
  school_id String?

  @@id([user_id, period_id])
  @@map("records")
}

model Document {
  id            String         @id @default(uuid())
  category      Category       @default(FT)
  status        Status         @default(PENDING)
  analysed_at   Float          @default(0)
  justification String?        @db.VarChar(200)
  image         Image?
  record        Record?        @relation(fields: [record_id], references: [key], onDelete: Cascade)
  record_id     String?        @unique
  user          User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String?
  users         DocumentUser[]

  @@map("documents")
}

model DocumentUser {
  key         String   @unique @default(uuid())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  document    Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  document_id String

  @@id([user_id, document_id])
  @@map("document_user")
}

model Year {
  id      String   @id @default(uuid())
  year    String   @unique @db.VarChar(10)
  periods Period[]

  @@map("years")
}

model Month {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(30)
  month Int    @unique @db.Integer

  @@map("months")
}

model Period {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(50)
  date_initial DateTime @db.Date
  date_final   DateTime @db.Date
  year         Year     @relation(fields: [year_id], references: [id], onDelete: Cascade)
  year_id      String
  records      Record[]

  @@map("periods")
}

model Request {
  id            String   @id @default(uuid())
  justification String   @db.VarChar(200)
  created_at    DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String

  @@map("requests")
}

model Image {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(200)
  size        Int      @db.Integer()
  url         String   @db.VarChar(200)
  key         String   @unique @db.VarChar(200)
  created_at  DateTime @default(now())
  document    Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  document_id String   @unique

  @@map("images")
}

model Token {
  id         String   @id @default(uuid())
  token      String   @db.VarChar(200)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String   @unique
  created_at DateTime @default(now())

  @@map("token")
}
